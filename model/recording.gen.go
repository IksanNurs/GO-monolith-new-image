// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"time"

	"gorm.io/gorm"
)

const TableNameRecording = "recording"

// Recording mapped from table <recording>
type Recording struct {
	ID        int32   `gorm:"column:id;type:int(11);primaryKey;autoIncrement:true" json:"id"`
	MeetingID int32   `gorm:"column:meeting_id;type:int(11);not null;index:meeting_id,priority:1" json:"meeting_id"`
	Name      string  `gorm:"column:name;type:varchar(255);not null" json:"name" form:"name"`
	File      *string `gorm:"column:file;type:text" json:"file"`
	URL       *string `gorm:"column:url;type:text" json:"url" form:"url"`
	Embed     *string `gorm:"column:embed;type:text" json:"embed" form:"embed"`
	CreatedAt *int32  `gorm:"column:created_at;type:int(11)" json:"created_at"`
	UpdatedAt *int32  `gorm:"column:updated_at;type:int(11)" json:"updated_at"`
	CreatedBy *int32  `gorm:"column:created_by;type:int(11)" json:"created_by"`
	UpdatedBy *int32  `gorm:"column:updated_by;type:int(11)" json:"updated_by"`
	Meeting   Meeting `gorm:"foreignkey:MeetingID" json:"Meeting"`
}

type InputRecording struct {
	MeetingID int32   `gorm:"column:meeting_id;type:int(11);not null;index:meeting_id,priority:1" json:"meeting_id" form:"meeting_id"`
	Name      string  `gorm:"column:name;type:varchar(255);not null" json:"name" form:"name"`
	URL       *string `gorm:"column:url;type:text" json:"url" form:"url"`
	Embed     *string `gorm:"column:embed;type:text" json:"embed" form:"embed"`
	CreatedAt *int32  `gorm:"column:created_at;type:int(11)" json:"created_at"`
}

func (i *InputRecording) BeforeCreate(scope *gorm.DB) error {
    now := int32(time.Now().UTC().Unix())
    i.CreatedAt = &now
    return nil
}


// TableName Recording's table name
func (*Recording) TableName() string {
	return TableNameRecording
}

func (*InputRecording) TableName() string {
	return TableNameRecording
}

